from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from uuid import uuid4
from typing import Callable, TypeVar, Any, get_args, get_type_hints, get_origin, List, Type, Generic


class Fragment(BaseModel):
    """
    A class representing a fragment of document/media.
    """
    id: str = Field(
        default_factory=lambda: str(uuid4()),
        description="Unique identifier for the fragment.")
    metadata: Dict[str, Any] = Field(
        ..., description="Metadata associated with the fragment."
    )

class Document(Fragment):
    pass

class SearchDocument(Fragment):
    pass

class Operation(BaseModel):
    """
    A class representing an operation to be performed on one or more fragments and 
    generating one or more new fragments
    """
    id: str = Field(
        default_factory=lambda: str(uuid4()),
        description="Unique identifier for the operation.")
    name: str = Field(..., description="Type of the operation.")
    parameters: List[Fragment] = Field(
        ..., description="Parameters for the operation."
    )
    results: List[Fragment] = Field(
        ..., description="List of fragments generated by the operation."
    )

    def __init__(self, **kwargs):
        """
        Initialize the Operation instance.
        """
        if not kwargs.get("id"):
            kwargs["id"] = str(uuid4())
        super().__init__(**kwargs)


#
# Operations
#

CommandFunctionType = TypeVar("CommandFunctionType", bound=Callable[..., Any])

class OperationInput(BaseModel):
    """
    A class representing the input to an operation function.
    """
    name: str = Field(..., description="Name of the input parameter.")
    input_type: type[Fragment] = Field(..., description="Type of the input parameter.")
    filter: Dict[str, Any] = Field(
        ..., description="Filter for the input parameter."
    )

class OperationOutput(BaseModel):
    """
    A class representing the output of an operation function.
    """
    output_type: Any = Field(..., description="Type of the input parameter.") # TODO: get rid of Any
    multiple: bool = Field(
        ..., description="Whether the output parameter is multiple."
    )
    metadata: Dict[str, Any] = Field(
        ..., description="Filter for the input parameter."
    )

class OperationInfo(BaseModel):
    """
    A class representing a operation function.
    """
    name: str = Field(..., description="Name of the operation function.")
    input: OperationInput
    output: OperationOutput
    func: CommandFunctionType = Field(
        ..., description="The operation function."
    )

    def __call__(self, *args, **kwargs):
        return self.func(*args, **kwargs)